Buongiorno prof, sono Mattia Rizza e questo è il mio esercizio per la S7 di IG.
L’obiettivo era creare un piccolo sistema planetario in Three.js, con pianeti che ruotano attorno al Sole, 
una luna e la possibilità di cambiare visuale tramite un’interfaccia GUI. In iù ho aggiunto la mia "firma" nel esercizio.

QUESTO é IL LINK PER IL CODICE: https://codesandbox.io/p/sandbox/ig-s7-3njfrg?file=%2Fsrc%2Fsis_plan.js%3A155%2C1-171%2C2

Nel file vengono caricate le texture dei pianeti e del Sole:

const txHea = new THREE.TextureLoader().load("src/earthmap1k.jpg");
const txSun = new THREE.TextureLoader().load("src/sun.jpg");
const txMoon = new THREE.TextureLoader().load("src/moon.jpg");
const txJup = new THREE.TextureLoader().load("src/jupiter.jpg");
const txMar = new THREE.TextureLoader().load("src/mars.jpg");
const txSat = new THREE.TextureLoader().load("src/saturn.jpg");
const txUra = new THREE.TextureLoader().load("src/uranus.jpg");

le immagini le ho trovate nel sito: https://www.solarsystemscope.com/textures/ dove ho fatto il download delle immagini e poi le ho caricate 
su codesanbox nella cartella src 

Ogni pianeta viene creato con la funzione Planeta():

function Planeta(radio, dist, vel, f1, f2, texture) {
  let geom = new THREE.SphereGeometry(radio, 10, 10);
  let mat = new THREE.MeshPhongMaterial({ map: texture });
  let planeta = new THREE.Mesh(geom, mat);
  planeta.userData.dist = dist;
  planeta.userData.speed = vel;
  scene.add(planeta);
}

Ogni pianeta ha:
 - un raggio (radio)
 - una distanza dal Sole (dist)
 - una velocità orbitale (vel)
 - fattori deformazione dell'orbita ellittica (f1 e f2)
 - una texture


il Sole funziona come sorgente luminosa che illumina i pianeta:

const sunLight = new THREE.PointLight(0xffffff, 50, 100);
sunLight.position.set(0, 0, 0);
scene.add(sunLight);
come si può vedere dall'immagine

![luce sui pianeti](img/luce.png)


io aggiunto un piccolo menu GUI per cambiare visuale che quando si attiva l’opzione “Vista soggettiva”, 
la camera si sposta vicino al Sole per una visione più immersiva:

const Cam_Info = new GUI().addFolder("Camera");
Cam_Info.add(Cam_Params, "cercaSole")
  .name("Vista soggettiva")
  .onChange((value) => {
    if (value) {
      camera.position.set(-3, -5, 3);
      camera.lookAt(10, 30, -25);
    } else {
      camera.position.set(0, 0, 10);
      camera.lookAt(0, 0, 0);
    }
  });

Nel ciclo animationLoop() i pianeti ruotano attorno al Sole e su sé stessi:

object.position.x = Math.cos(timestamp * object.userData.speed) * object.userData.dist;
object.position.y = Math.sin(timestamp * object.userData.speed) * object.userData.dist;
object.rotation.y -= 0.013; 

Ho creato pure la luna che gira attorno alla terra:
function Luna(planeta, radio, dist, vel, col, angle, texture = undefined) {
  var pivote = new THREE.Object3D();
  pivote.rotation.x = angle;
  planeta.add(pivote);
  var geom = new THREE.SphereGeometry(radio, 10, 10);
  var mat = new THREE.MeshBasicMaterial({ color: 0xffffff });
  var luna = new THREE.Mesh(geom, mat);
  luna.userData.dist = dist;
  luna.userData.speed = vel;

  if (texture != undefined) {
    mat.map = texture;
  }

  Lunas.push(luna);
  pivote.add(luna);
}


Con questo codice ho messo la mia "firma" sul progetto in basso a destra 
  info = document.createElement("div");
  info.style.position = "absolute";
  info.style.top = "600px";
  info.style.width = "90%";
  info.style.textAlign = "right";
  info.style.color = "#fff";
  info.style.fontWeight = "bold";
  info.style.backgroundColor = "transparent";
  info.style.zIndex = "1";
  info.style.fontFamily = "Monospace";
  info.innerHTML = "Mattia Rizza";
  document.body.appendChild(info);


Alla fine il progetto è stato un mix dei vari esercizi visti in classe, è stato molto interessante riuscire a dare una texture alle sfere 
monocolore create, anche dare la luce ad un elemento, che in questo caso è il sole è stato molto sorprendente riuscire a farlo.



